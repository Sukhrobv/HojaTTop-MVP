import React, { useState } from 'react'
import { ScrollView, YStack, XStack, Text, Button, TextArea, Card, Separator, Label, Spinner } from 'tamagui'
import { Alert, Pressable } from 'react-native'
import { useNavigation, useRoute } from '@react-navigation/native'
import { NativeStackNavigationProp } from '@react-navigation/native-stack'
import { RouteProp } from '@react-navigation/native'
import { RootStackParamList } from '@/navigation'
import { useReviews } from '@/hooks/useReviews'
import { Review } from '@/types'

type NavigationProp = NativeStackNavigationProp<RootStackParamList, 'AddReview'>
type RouteProps = RouteProp<RootStackParamList, 'AddReview'>

const RatingSelector = ({ 
  label, 
  value, 
  onChange,
  required = false 
}: { 
  label: string
  value: number
  onChange: (rating: number) => void
  required?: boolean
}) => {
  return (
    <YStack space="$2">
      <Label>
        {label}
        {required && <Text color="red"> *</Text>}
      </Label>
      <XStack space="$2">
        {[1, 2, 3, 4, 5].map((star) => (
          <Pressable key={star} onPress={() => onChange(star)}>
            <Text fontSize={30}>
              {star <= value ? '‚≠ê' : '‚òÜ'}
            </Text>
          </Pressable>
        ))}
      </XStack>
      {value > 0 && (
        <Text fontSize={12} color="$colorSubtle">
          {value === 1 && '–£–∂–∞—Å–Ω–æ'}
          {value === 2 && '–ü–ª–æ—Ö–æ'}
          {value === 3 && '–ù–æ—Ä–º–∞–ª—å–Ω–æ'}
          {value === 4 && '–•–æ—Ä–æ—à–æ'}
          {value === 5 && '–û—Ç–ª–∏—á–Ω–æ'}
        </Text>
      )}
    </YStack>
  )
}

export default function AddReviewScreen() {
  const navigation = useNavigation<NavigationProp>()
  const route = useRoute<RouteProps>()
  const { toiletId } = route.params

  const { addNewReview } = useReviews(toiletId)

  // Form state
  const [rating, setRating] = useState(0)
  const [cleanliness, setCleanliness] = useState(0)
  const [accessibility, setAccessibility] = useState(0)
  const [comment, setComment] = useState('')
  const [submitting, setSubmitting] = useState(false)

  const handleSubmit = async () => {
    // Validation
    if (rating === 0) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É')
      return
    }

    if (comment.length > 500) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤')
      return
    }

    setSubmitting(true)

    try {
      const reviewData: Omit<Review, 'id' | 'createdAt'> = {
        toiletId,
        userId: 'anonymous', // TODO: Add proper user management
        userName: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        rating,
        cleanliness,
        accessibility,
        comment: comment.trim(),
        photos: [] // TODO: Add photo upload functionality
      }

      const success = await addNewReview(reviewData)

      if (success) {
        Alert.alert(
          '–£—Å–ø–µ—à–Ω–æ!', 
          '–í–∞—à –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
          [{ 
            text: 'OK', 
            onPress: () => {
              // Small delay to ensure data is synced
              setTimeout(() => {
                navigation.goBack()
              }, 500)
            }
          }]
        )
      } else {
        Alert.alert(
          '–û—à–∏–±–∫–∞',
          '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
      }
    } catch (error) {
      console.error('Error submitting review:', error)
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞'
      )
    } finally {
      setSubmitting(false)
    }
  }

  const isFormValid = rating > 0
  const commentLength = comment.length

  return (
    <ScrollView flex={1} backgroundColor="$background">
      <YStack padding="$4" space="$4">
        {/* Rating Card */}
        <Card elevate bordered>
          <Card.Header>
            <Text fontSize={18} fontWeight="bold">
              –û—Ü–µ–Ω–∫–∞ —Ç—É–∞–ª–µ—Ç–∞
            </Text>
            <Text fontSize={14} color="$colorSubtle" marginTop="$1">
              –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            </Text>
          </Card.Header>
          
          <Separator />
          
          <Card.Footer padded>
            <YStack space="$4">
              <RatingSelector
                label="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞"
                value={rating}
                onChange={setRating}
                required={true}
              />
              
              <RatingSelector
                label="–ß–∏—Å—Ç–æ—Ç–∞"
                value={cleanliness}
                onChange={setCleanliness}
              />
              
              <RatingSelector
                label="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
                value={accessibility}
                onChange={setAccessibility}
              />
            </YStack>
          </Card.Footer>
        </Card>

        {/* Comment Card */}
        <Card elevate bordered>
          <Card.Header>
            <Text fontSize={18} fontWeight="bold">
              –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            </Text>
            <Text fontSize={14} color="$colorSubtle" marginTop="$1">
              –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </Text>
          </Card.Header>
          
          <Separator />
          
          <Card.Footer padded>
            <YStack space="$3">
              <TextArea
                placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –æ–ø—ã—Ç–æ–º: —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å..."
                value={comment}
                onChangeText={setComment}
                numberOfLines={4}
                minHeight={100}
                maxLength={500}
                backgroundColor="$backgroundFocus"
                borderColor="$borderColor"
                borderWidth={1}
                borderRadius="$2"
                padding="$3"
              />
              <XStack justifyContent="space-between" alignItems="center">
                <Text fontSize={12} color="$colorSubtle">
                  –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤
                </Text>
                <Text fontSize={12} color={commentLength > 450 ? 'red' : '$colorSubtle'}>
                  {commentLength}/500
                </Text>
              </XStack>
            </YStack>
          </Card.Footer>
        </Card>

        {/* Photo Upload (placeholder) */}
        <Card elevate bordered>
          <Card.Header>
            <Text fontSize={18} fontWeight="bold">
              –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            </Text>
            <Text fontSize={14} color="$colorSubtle" marginTop="$1">
              –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </Text>
          </Card.Header>
          
          <Separator />
          
          <Card.Footer padded>
            <Pressable
              onPress={() => Alert.alert('–°–∫–æ—Ä–æ', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')}
              style={{
                backgroundColor: '#F5F5F5',
                borderRadius: 8,
                padding: 20,
                alignItems: 'center',
                borderWidth: 2,
                borderColor: '#E0E0E0',
                borderStyle: 'dashed',
              }}
            >
              <Text fontSize={40} marginBottom="$2">üì∑</Text>
              <Text color="$colorSubtle">–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ</Text>
              <Text color="$colorSubtle" fontSize={12} marginTop="$1">
                –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ
              </Text>
            </Pressable>
          </Card.Footer>
        </Card>

        {/* Tips Card */}
        <Card elevate bordered backgroundColor="$backgroundHover">
          <Card.Header>
            <Text fontSize={16} fontWeight="bold">
              üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞
            </Text>
          </Card.Header>
          
          <Separator />
          
          <Card.Footer padded>
            <YStack space="$2">
              <Text fontSize={12} color="$colorSubtle">
                ‚Ä¢ –ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º–∏
              </Text>
              <Text fontSize={12} color="$colorSubtle">
                ‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã
              </Text>
              <Text fontSize={12} color="$colorSubtle">
                ‚Ä¢ –û—Ç–º–µ—Ç—å—Ç–µ —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
              </Text>
              <Text fontSize={12} color="$colorSubtle">
                ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ—Å–µ—â–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∞–∂–Ω–æ
              </Text>
            </YStack>
          </Card.Footer>
        </Card>

        {/* Submit Button */}
        <Button 
          size="$5" 
          backgroundColor={isFormValid ? "#4ECDC4" : "$backgroundPress"}
          pressStyle={{ backgroundColor: isFormValid ? '#3BA99C' : '$backgroundPress' }}
          onPress={handleSubmit}
          disabled={!isFormValid || submitting}
        >
          {submitting ? (
            <XStack alignItems="center" space="$2">
              <Spinner size="small" color="white" />
              <Text color="white" fontWeight="bold">
                –û—Ç–ø—Ä–∞–≤–∫–∞...
              </Text>
            </XStack>
          ) : (
            <Text color={isFormValid ? "white" : "$colorSubtle"} fontWeight="bold">
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
            </Text>
          )}
        </Button>
      </YStack>
    </ScrollView>
  )
}